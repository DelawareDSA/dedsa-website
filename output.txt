Only in frontend-backup/src/app/about: AboutHero.tsx
Only in frontend-backup/src/app/about: Achievements.tsx
Only in frontend-backup/src/app/about: DemocraticSocialism.tsx
Only in frontend-backup/src/app/about: GetInvolved.tsx
Only in frontend-backup/src/app/about: NationalInfo.tsx
Only in frontend-backup/src/app/about: Timeline.tsx
diff --color -r frontend-backup/src/app/about/page.tsx frontend/src/app/about/page.tsx
1,130c1,2
< // src/app/about/page.tsx
< 
< // 1. Force this page to render at request-time rather than at build-time
< export const dynamic = 'force-dynamic';
< 
< import { Metadata } from 'next';
< import { notFound } from 'next/navigation';
< import ErrorDisplay from '../../components/errors/ErrorDisplay';
< import pageData from '../../content/consolidated/about.json';
< import { AboutPageContent } from '../../types/content/about';
< import AboutHero from './AboutHero';
< import Achievements from './Achievements';
< import DemocraticSocialism from './DemocraticSocialism';
< import GetInvolved from './GetInvolved';
< import NationalInfo from './NationalInfo';
< import Timeline from './Timeline';
< 
< // Type assertion for imported JSON
< const typedContent = pageData.page as AboutPageContent;
< 
< export const metadata: Metadata = {
<   title: 'About Us',
<   description:
<     'Learn about the history, mission, and values of the Delaware chapter of the Democratic Socialists of America.',
< };
< 
< // ISR: revalidate every 5 minutes (ignored when dynamic = 'force-dynamic')
< export const revalidate = 300;
< 
< // 2. Use SLUG instead of URI so WPGraphQL finds the page by its slug
< const GET_ABOUT_PAGE = `
<   query GetAboutPage {
<     page(id: "about", idType: SLUG) {
<       content
<       about {
<         foundingYear
<         achievements
<         missionStatement
<       }
<     }
<   }
< `;
< 
< interface AboutPageData {
<   page?: {
<     content?: string | null;
<     about?: {
<       foundingYear?: number | null;
<       achievements?: string[] | null;
<       missionStatement?: string | null;
<     } | null;
<   } | null;
< }
< 
< export default async function AboutPage() {
<   const endpoint =
<     process.env.NEXT_PUBLIC_WORDPRESS_API_URL ||
<     'http://delaware-dsa-backend.local/graphql';
< 
<   try {
<     const res = await fetch(endpoint, {
<       method: 'POST',
<       headers: { 'Content-Type': 'application/json' },
<       cache: 'force-cache',
<       body: JSON.stringify({ query: GET_ABOUT_PAGE }),
<     });
<     if (!res.ok) {
<       throw new Error(`Network response was not ok: ${res.status}`);
<     }
< 
<     const { data } = (await res.json()) as { data: AboutPageData };
<     if (!data?.page) return notFound();
< 
<     const pageContentHtml = data.page.content ?? typedContent.fallbackContent;
< 
<     const aboutInfo = data.page.about ?? {
<       foundingYear: 2021,
<       missionStatement:
<         "Delaware DSA's mission is to build a democratic, multi-racial socialist movement in Delaware that fights for economic, racial, and social justice for all working people.",
<       achievements: [
<         'Successfully advocated for tenant protections in Wilmington',
<         'Organized mutual aid networks during the COVID-19 pandemic',
<         'Campaigned for Medicare for All in partnership with healthcare workers',
<         'Supported labor organizing efforts across the state',
<         'Built coalitions with community organizations fighting for racial justice',
<       ],
<     };
< 
<     const currentYear = new Date().getFullYear();
<     const yearsActive = currentYear - (aboutInfo.foundingYear || 2021);
< 
<     return (
<       <div className="bg-gray-100 py-12 pt-10">
<         <div className="container-page">
<           <h1 className="text-4xl font-bold mb-4">{typedContent.title}</h1>
< 
<           <div className="bg-white p-8 rounded-lg shadow-md mb-8">
<             <div
<               className="prose prose-lg max-w-none"
<               dangerouslySetInnerHTML={{ __html: pageContentHtml }}
<             />
<           </div>
< 
<           <AboutHero
<             missionStatement={aboutInfo.missionStatement || undefined}
<           />
<           <Timeline
<             foundingYear={aboutInfo.foundingYear || undefined}
<             yearsActive={yearsActive}
<           />
<           <Achievements achievements={aboutInfo.achievements || undefined} />
<           <DemocraticSocialism />
<           <GetInvolved />
<           <NationalInfo />
<         </div>
<       </div>
<     );
<   } catch (err: unknown) {
<     console.error('About page fetch error:', err);
<     const msg = err instanceof Error ? err.message : String(err);
<     return (
<       <ErrorDisplay
<         title="Error Loading About Page"
<         message={msg}
<         actionLabel="Return to Home"
<         actionHref="/"
<       />
<     );
<   }
< }
---
> import AboutPage from '@/features/about/Page';
> export default AboutPage;
diff --color -r frontend-backup/src/app/api/graphql/route.ts frontend/src/app/api/graphql/route.ts
2c2
< import { handleGraphQLRequest } from '../../../mocks/api/mockApiHandlers';
---
> import { handleGraphQLRequest } from '@/mocks/api/mockApiHandlers';
Only in frontend/src/app/api/newsletters/[slug]: route.ts
diff --color -r frontend-backup/src/app/api/newsletters/route.ts frontend/src/app/api/newsletters/route.ts
4c4
< import { Newsletter } from '../../../types/newsletter/index';
---
> import { Newsletter } from '@/core/types/index';
Only in frontend-backup/src/app/bylaws: BylawsDocument.tsx
Only in frontend-backup/src/app/bylaws: FrequentlyAskedQuestions.tsx
Only in frontend-backup/src/app/bylaws: KeyGovernanceSections.tsx
Only in frontend-backup/src/app/bylaws: OtherDocuments.tsx
diff --color -r frontend-backup/src/app/bylaws/page.tsx frontend/src/app/bylaws/page.tsx
1,107c1,2
< // src/app/bylaws/page.tsx
< import { Metadata } from 'next';
< import { notFound } from 'next/navigation';
< import ErrorDisplay from '../../components/errors/ErrorDisplay';
< import json from '../../content/bylaws/page.json';
< import BylawsDocument from './BylawsDocument';
< import FrequentlyAskedQuestions from './FrequentlyAskedQuestions';
< import KeyGovernanceSections from './KeyGovernanceSections';
< import OtherDocuments from './OtherDocuments';
< 
< export const dynamic = 'force-dynamic';
< export const revalidate = 300;
< export const metadata: Metadata = {
<   title: 'Bylaws',
<   description: 'Chapter bylaws and governance.',
< };
< 
< const j = json as {
<   title: string;
<   fallbackContent: string;
<   currentVersionLabel: string;
<   lastUpdatedLabel: string;
<   downloadButtonText: string;
< };
< const Q = `query{page(id:"bylaws",idType:URI){content,bylaws{pdfUrl,lastUpdated}}}`;
< 
< export default async function BylawsPage() {
<   const ep =
<     process.env.NEXT_PUBLIC_WORDPRESS_API_URL ||
<     'http://delaware-dsa-backend.local/graphql';
< 
<   try {
<     const res = await fetch(ep, {
<       method: 'POST',
<       headers: { 'Content-Type': 'application/json' },
<       cache: 'force-cache',
<       body: JSON.stringify({ query: Q }),
<     });
<     if (!res.ok) throw new Error(`HTTP ${res.status}`);
< 
<     const pg = (await res.json()).data.page;
<     if (!pg) return notFound();
< 
<     const html = pg.content ?? j.fallbackContent;
<     const pdf = pg.bylaws?.pdfUrl ?? '/documents/delaware-dsa-bylaws.pdf';
<     const lu = pg.bylaws?.lastUpdated ?? 'January 15, 2024';
< 
<     return (
<       <div className="bg-gray-100 py-12">
<         <div className="container-page">
<           <h1 className="text-4xl font-bold mb-4">{j.title}</h1>
< 
<           <div
<             className="bg-white p-8 rounded-lg shadow-md mb-8"
<             dangerouslySetInnerHTML={{ __html: html }}
<           />
< 
<           <div className="flex justify-between bg-gray-50 p-4 rounded-lg mb-6">
<             <p className="font-medium">
<               {j.currentVersionLabel}{' '}
<               <span className="text-gray-600">
<                 {j.lastUpdatedLabel} {lu}
<               </span>
<             </p>
<             <a
<               href={pdf}
<               download
<               className="btn btn-primary flex items-center"
<             >
<               <svg
<                 className="h-5 w-5 mr-2"
<                 fill="none"
<                 stroke="currentColor"
<                 viewBox="0 0 24 24"
<               >
<                 <path
<                   strokeLinecap="round"
<                   strokeLinejoin="round"
<                   strokeWidth="2"
<                   d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
<                 />
<               </svg>
<               {j.downloadButtonText}
<             </a>
<           </div>
< 
<           <BylawsDocument bylawsPdf={pdf} />
<           <KeyGovernanceSections bylawsPdf={pdf} />
<           <FrequentlyAskedQuestions lastUpdated={lu} />
<           <OtherDocuments />
<         </div>
<       </div>
<     );
<   } catch (error: unknown) {
<     console.error('Bylaws fetch error:', error);
<     const msg = error instanceof Error ? error.message : String(error);
<     return (
<       <ErrorDisplay
<         title="Error Loading Bylaws"
<         message="We're having trouble loading this page. Please try again later."
<         error={msg}
<         actionLabel="Return to Home"
<         actionHref="/"
<       />
<     );
<   }
< }
---
> import BylawsPage from '@/features/bylaws/Page';
> export default BylawsPage;
Only in frontend-backup/src/app/bylaws: queries.ts
Only in frontend-backup/src/app/calendar: EventCalendar.tsx
Only in frontend-backup/src/app/calendar: EventList.tsx
Only in frontend-backup/src/app/calendar: MonthSelector.tsx
diff --color -r frontend-backup/src/app/calendar/page.tsx frontend/src/app/calendar/page.tsx
1,6c1,7
< // src/app/calendar/page.tsx
< import ErrorDisplay from '../../components/errors/ErrorDisplay';
< import GenericCard from '../../components/shared/GenericCard';
< import GenericSection from '../../components/shared/GenericSection';
< import EventCalendar from './EventCalendar';
< import { CalendarEvent, CalendarProps, EventsData } from './types';
---
> import { contentService } from '@/core/services/contentService';
> import type {
>   CalendarPageContent,
>   EventCalendarContent,
>   MonthSelectorContent,
> } from '@/core/types/pages/calendar';
> import CalendarFeature from '@/features/calendar';
8,60c9,14
< // Import page content from consolidated file
< 
< export const dynamic = 'force-dynamic';
< 
< export const revalidate = 300;
< 
< // Inline GraphQL query string (no `gql` tag)
< const GET_EVENTS_QUERY = `
<   query GetEvents {
<     events(
<       first: 100
<       where: { orderby: { field: META, metaKey: "eventDate", order: ASC } }
<     ) {
<       nodes {
<         id
<         title
<         excerpt
<         content
<         date
<         meta {
<           eventDate
<           eventTime
<           eventLocation
<           eventVirtualLink
<         }
<       }
<     }
<   }
< `;
< 
< export default async function CalendarPage({ searchParams }: CalendarProps) {
<   const endpoint =
<     process.env.NEXT_PUBLIC_WORDPRESS_API_URL ||
<     'http://delaware-dsa-backend.local/graphql';
< 
<   const { month } = await searchParams;
<   const selectedMonth = month || '';
<   let events: CalendarEvent[] = [];
< 
<   // State for content
<   const pageContent = {
<     title: 'Events Calendar',
<     subtitle:
<       'Join us for meetings, actions, educational events, and social gatherings.',
<     errorTitle: 'Unable to Load Calendar',
<     errorMessage:
<       "We're experiencing technical difficulties loading events. Please try again later.",
<     errorActionLabel: 'Return to Home',
<     subscribeTitle: 'Subscribe to Our Calendar',
<     subscribeText:
<       'Stay up-to-date with all Delaware DSA events by subscribing to our calendar.',
<     googleCalendarButtonText: 'Google Calendar',
<     iCalOutlookButtonText: 'iCal / Outlook',
---
> export default function CalendarPage() {
>   const data = contentService.getPageContent(
>     'calendar'
>   ) as CalendarPageContent & {
>     eventCalendar: EventCalendarContent;
>     monthSelectorData: MonthSelectorContent;
62,153c16
< 
<   // Dynamic import once we move to SSR implementation
<   try {
<     // dynamically load content from JSON file when moved to SSR implementation
<   } catch (error) {
<     console.error('Error loading calendar content:', error);
<   }
< 
<   try {
<     // dynamically load content from JSON file when moved to SSR implementation
<     const res = await fetch(endpoint, {
<       method: 'POST',
<       headers: { 'Content-Type': 'application/json' },
<       cache: 'force-cache',
<       body: JSON.stringify({ query: GET_EVENTS_QUERY }),
<     });
< 
<     if (!res.ok) {
<       throw new Error(`Network response was not ok: ${res.status}`);
<     }
< 
<     const json = await res.json();
<     const data = (json.data ?? {}) as EventsData;
<     events = data.events?.nodes || [];
< 
<     // Fallback: generate sample events if none exist
<     if (events.length === 0) {
<       const today = new Date();
<       events = Array.from({ length: 10 }, (_, i) => {
<         const eventDate = new Date(today);
<         eventDate.setDate(today.getDate() + i * 3);
<         return {
<           id: `sample-${i}`,
<           title: `Sample Event ${i + 1}`,
<           excerpt: `This is a sample event ${i + 1}.`,
<           content: `<p>This is a sample event description for event ${
<             i + 1
<           }.</p>`,
<           date: today.toISOString(),
<           meta: {
<             eventDate: eventDate.toISOString(),
<             eventTime: `${(i % 12) + 1}:00 ${i % 2 === 0 ? 'PM' : 'AM'}`,
<             eventLocation:
<               i % 3 === 0 ? 'Virtual' : 'Delaware State University, Dover, DE',
<             eventVirtualLink: i % 3 === 0 ? 'https://example.com' : undefined,
<           },
<         };
<       });
<     }
< 
<     return (
<       <GenericSection
<         heading={pageContent.title}
<         subheading={pageContent.subtitle}
<         background="gray"
<       >
<         <EventCalendar events={events} selectedMonth={selectedMonth} />
< 
<         <GenericCard title={pageContent.subscribeTitle} className="mt-12">
<           <p className="mb-6">{pageContent.subscribeText}</p>
<           <div className="flex flex-wrap gap-4">
<             <a
<               href="#"
<               className="btn bg-blue-500 text-white hover:bg-blue-600"
<             >
<               {pageContent.googleCalendarButtonText}
<             </a>
< 
<             <a
<               href="#"
<               className="btn bg-gray-800 text-white hover:bg-gray-900"
<             >
<               {pageContent.iCalOutlookButtonText}
<             </a>
<           </div>
<         </GenericCard>
<       </GenericSection>
<     );
<   } catch (err: unknown) {
<     console.error('Calendar fetch error:', err);
<     const errorMessage = err instanceof Error ? err.message : String(err);
< 
<     return (
<       <ErrorDisplay
<         title={pageContent.errorTitle}
<         message={pageContent.errorMessage}
<         error={errorMessage}
<         actionLabel={pageContent.errorActionLabel}
<         actionHref="/"
<       />
<     );
<   }
---
>   return <CalendarFeature {...data} />;
Only in frontend-backup/src/app/calendar: types
Only in frontend-backup/src/app/contact: ContactForm.tsx
diff --color -r frontend-backup/src/app/contact/page.tsx frontend/src/app/contact/page.tsx
1,8c1,6
< // src/app/contact/page.tsx
< import { Metadata } from 'next';
< import { notFound } from 'next/navigation';
< import ErrorDisplay from '../../components/errors/ErrorDisplay';
< import { MailIcon, MapPinIcon, PhoneIcon } from '../../components/ui/Icons';
< import pageJson from '../../content/contact/page.json';
< import { ContactPageContent } from '../../types/content/contact';
< import ContactForm from './ContactForm';
---
> import { contentService } from '@/core/services/contentService';
> import type {
>   ContactFormContent,
>   ContactPageContent,
> } from '@/core/types/pages/contact';
> import ContactFeature from '@/features/contact';
10,15c8,13
< export const dynamic = 'force-dynamic';
< export const revalidate = 300;
< export const metadata: Metadata = {
<   title: 'Contact Us',
<   description: 'Get in touch with Delaware DSA.',
< };
---
> export default function ContactPage() {
>   const pageData = contentService.getPageContent(
>     'contact'
>   ) as ContactPageContent & {
>     contactForm: ContactFormContent;
>   };
17,18c15,16
< const c = pageJson as ContactPageContent;
< const Q = `query{page(id:"contact",idType:URI){content,contactInfo{email,phone,mailingAddress}}}`;
---
>   // Destructure to avoid property conflicts
>   const { contactForm, ...pageContent } = pageData;
20,133c18
< export default async function ContactPage() {
<   let data;
<   try {
<     const res = await fetch(
<       process.env.NEXT_PUBLIC_WORDPRESS_API_URL || '/api/contact',
<       {
<         method: 'POST',
<         headers: { 'Content-Type': 'application/json' },
<         cache: 'force-cache',
<         body: JSON.stringify({ query: Q }),
<       }
<     );
<     if (!res.ok) throw new Error(`HTTP ${res.status}`);
<     data = (await res.json()).data;
<     if (!data.page?.content) return notFound();
<   } catch (error: unknown) {
<     const msg = error instanceof Error ? error.message : String(error);
<     return (
<       <ErrorDisplay
<         title={c.error.title}
<         message={msg}
<         actionLabel={c.error.actionLabel}
<         actionHref="/"
<       />
<     );
<   }
< 
<   const html = data.page.content;
<   const info = data.page.contactInfo ?? c.fallbackContactInfo;
< 
<   return (
<     <div className="bg-gray-100 py-12">
<       <div className="container-page">
<         <h1 className="text-4xl font-bold mb-4">{c.heading}</h1>
<         <div className="bg-white p-8 rounded-lg shadow-md mb-8">
<           <div
<             className="prose prose-lg max-w-none mb-8"
<             dangerouslySetInnerHTML={{ __html: html }}
<           />
<           <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
<             {/* Contact Info */}
<             <section>
<               <h2 className="text-2xl font-bold mb-4">
<                 {c.sections.getInTouch.title}
<               </h2>
<               <ul className="space-y-4">
<                 {(['email', 'phone', 'mailingAddress'] as const).map((k) => {
<                   const Label = c.sections.getInTouch.contactTypes[k].label;
<                   const val = info[k];
<                   const href =
<                     k === 'email'
<                       ? `mailto:${val}`
<                       : k === 'phone'
<                         ? `tel:${val.replace(/\D/g, '')}`
<                         : undefined;
<                   return (
<                     <li key={k} className="flex items-start">
<                       {k === 'email' ? (
<                         <MailIcon className="h-6 w-6 text-dsa-red mt-1 mr-3" />
<                       ) : k === 'phone' ? (
<                         <PhoneIcon className="h-6 w-6 text-dsa-red mt-1 mr-3" />
<                       ) : (
<                         <MapPinIcon className="h-6 w-6 text-dsa-red mt-1 mr-3" />
<                       )}
<                       <div>
<                         <p className="font-medium">{Label}</p>
<                         {href ? (
<                           <a
<                             href={href}
<                             className="text-dsa-red hover:underline"
<                           >
<                             {val}
<                           </a>
<                         ) : (
<                           <p className="whitespace-pre-line">{val}</p>
<                         )}
<                       </div>
<                     </li>
<                   );
<                 })}
<               </ul>
<               <div className="mt-8">
<                 <h3 className="text-xl font-bold mb-4">
<                   {c.sections.followUs.title}
<                 </h3>
<                 <div className="flex space-x-4">
<                   {c.sections.followUs.socialLinks.map((l) => (
<                     <a
<                       key={l.name}
<                       href={l.url}
<                       target="_blank"
<                       rel="noopener noreferrer"
<                       className="text-gray-700 hover:text-dsa-red"
<                     >
<                       <span className="sr-only">{l.name}</span>
<                       {/* inline SVG icons */}
<                       {/* ... */}
<                     </a>
<                   ))}
<                 </div>
<               </div>
<             </section>
<             {/* Contact Form */}
<             <section>
<               <h2 className="text-2xl font-bold mb-4">
<                 {c.sections.sendMessage.title}
<               </h2>
<               <ContactForm />
<             </section>
<           </div>
<         </div>
<       </div>
<     </div>
<   );
---
>   return <ContactFeature {...pageContent} contactForm={contactForm} />;
Only in frontend-backup/src/app/join: FAQ.tsx
Only in frontend-backup/src/app/join: JoinHero.tsx
Only in frontend-backup/src/app/join: MembershipOptions.tsx
Only in frontend-backup/src/app/join: Testimonials.tsx
Only in frontend-backup/src/app/join: WhyJoinDSA.tsx
diff --color -r frontend-backup/src/app/join/page.tsx frontend/src/app/join/page.tsx
1,87c1,2
< // Opt out of static generation so we don't crash at build time
< export const dynamic = 'force-dynamic';
< 
< import { Metadata } from 'next';
< import FAQ from './FAQ';
< import JoinHero from './JoinHero';
< import MembershipOptions from './MembershipOptions';
< import Testimonials from './Testimonials';
< import WhyJoinDSA from './WhyJoinDSA';
< 
< export const metadata: Metadata = {
<   title: 'Join Delaware DSA',
<   description:
<     'Become a member of the Delaware chapter of the Democratic Socialists of America.',
< };
< 
< // ISR: revalidate every 5 minutes (ignored when dynamic = 'force-dynamic')
< export const revalidate = 300;
< 
< // Use SLUG instead of URI so WPGraphQL finds the page by its slug
< const GET_JOIN_PAGE = `
<   query GetJoinPage {
<     page(id: "join", idType: SLUG) {
<       content
<     }
<   }
< `;
< 
< interface PageData {
<   page?: {
<     content?: string | null;
<   } | null;
< }
< 
< export default async function JoinPage() {
<   const endpoint =
<     process.env.NEXT_PUBLIC_WORDPRESS_API_URL ||
<     'http://delaware-dsa-backend.local/graphql';
< 
<   // Fallback if the query fails
<   let pageContent = `
<     <p>Join us in building a more just and democratic society! Delaware DSA is a chapter of the Democratic Socialists of America, the largest socialist organization in the United States.</p>
<     <p>By becoming a member, you'll be part of a growing movement fighting for economic justice, healthcare for all, housing as a human right, and genuine democracy in our workplaces and communities.</p>
<   `;
< 
<   try {
<     const res = await fetch(endpoint, {
<       method: 'POST',
<       headers: { 'Content-Type': 'application/json' },
<       // build-time fetch gets cached; dynamic = 'force-dynamic' makes this run per-request
<       cache: 'force-cache',
<       body: JSON.stringify({ query: GET_JOIN_PAGE }),
<     });
< 
<     if (!res.ok) {
<       throw new Error(`Network response was not ok: ${res.status}`);
<     }
< 
<     const json = await res.json();
<     const data = (json.data ?? {}) as PageData;
< 
<     if (data.page?.content) {
<       pageContent = data.page.content;
<     }
<   } catch (err: unknown) {
<     console.error('Join page fetch error:', err);
<     // We'll just show the fallback content
<   }
< 
<   return (
<     <div className="bg-gray-100 py-12">
<       <div className="container-page">
<         <JoinHero />
<         <div className="bg-white p-8 rounded-lg shadow-md mb-8">
<           <div
<             className="prose prose-lg max-w-none"
<             dangerouslySetInnerHTML={{ __html: pageContent }}
<           />
<         </div>
<         <MembershipOptions />
<         <WhyJoinDSA />
<         <Testimonials />
<         <FAQ />
<       </div>
<     </div>
<   );
< }
---
> import JoinPage from '@/features/join/Page';
> export default JoinPage;
Only in frontend-backup/src/app/join: queries.ts
diff --color -r frontend-backup/src/app/layout.tsx frontend/src/app/layout.tsx
0a1,3
> import { ThemeProvider } from '@/app/theme/ThemeProvider';
> import Footer from '@/core/components/layout/Footer';
> import Header from '@/core/components/layout/Header';
4,6d6
< import Footer from '../components/Footer';
< import Header from '../components/Header';
< import { ThemeProvider } from '../components/theme/ThemeProvider';
Only in frontend-backup/src/app/leadership: ChapterStructure.tsx
Only in frontend-backup/src/app/leadership: LeadershipCard.tsx
diff --color -r frontend-backup/src/app/leadership/page.tsx frontend/src/app/leadership/page.tsx
1,5c1,4
< import { Metadata } from 'next';
< import { notFound } from 'next/navigation';
< import ErrorDisplay from '../../components/errors/ErrorDisplay';
< import pageJson from '../../content/leadership/page.json';
< import {
---
> import { contentService } from '@/core/services/contentService';
> import type {
>   ChapterStructureContent,
>   LeadershipCardContent,
7,11c6,7
<   LeadershipPageData,
<   LeadershipRole,
< } from '../../types/content/leadership';
< import ChapterStructure from './ChapterStructure';
< import LeadershipCard from './LeadershipCard';
---
> } from '@/core/types/pages/leadership';
> import LeadershipFeature from '@/features/leadership';
13,159c9,16
< export const dynamic = 'force-dynamic';
< export const revalidate = 300;
< 
< export const metadata: Metadata = {
<   title: 'Leadership & Structure',
<   description:
<     'Learn about the leadership and organizational structure of Delaware DSA.',
< };
< 
< // Inline cast
< const c = pageJson as LeadershipPageContent;
< 
< const Q = `
<   query {
<     page(id:"leadership",idType:URI){content}
<     leadership(first:100,where:{orderby:{field:MENU_ORDER,order:ASC}}){
<       nodes{id,title,content,leadership{role,email,order},featuredImage{node{sourceUrl}}}
<     }
<   }
< `;
< 
< export default async function LeadershipPage() {
<   const url =
<     process.env.NEXT_PUBLIC_WORDPRESS_API_URL ||
<     'http://delaware-dsa-backend.local/graphql';
<   let data: LeadershipPageData;
< 
<   try {
<     const res = await fetch(url, {
<       method: 'POST',
<       headers: { 'Content-Type': 'application/json' },
<       cache: 'force-cache',
<       body: JSON.stringify({ query: Q }),
<     });
<     if (!res.ok) throw new Error(`HTTP ${res.status}`);
<     const j = await res.json();
<     data = (j.data ?? {}) as LeadershipPageData;
<   } catch (e: unknown) {
<     const errorMessage = e instanceof Error ? e.message : String(e);
<     return (
<       <ErrorDisplay
<         title="Error Loading Leadership Page"
<         message="We're having trouble loading this page. Please try again later."
<         error={errorMessage}
<         actionLabel="Return to Home"
<         actionHref="/"
<       />
<     );
<   }
< 
<   if (!data.page && !data.leadership) return notFound();
<   const html = data.page?.content ?? c.fallbackContent;
< 
<   let team: LeadershipRole[] =
<     data.leadership?.nodes.map((n) => ({
<       id: n.id,
<       title: n.leadership.role,
<       name: n.title,
<       bio: n.content,
<       email: n.leadership.email,
<       imageUrl: n.featuredImage?.node.sourceUrl,
<       order: n.leadership.order,
<     })) || [];
< 
<   if (team.length === 0) {
<     const env = (k: string) => `${k}@${process.env.NEXT_PUBLIC_EMAIL_DOMAIN}`;
<     team = [
<       {
<         id: 'chair',
<         title: 'Chapter Chair',
<         name: 'Alex Johnson',
<         bio: '<p>Alex has been an active DSA member since 2019…</p>',
<         email: env('chair'),
<         order: 1,
<       },
<       {
<         id: 'vice-chair',
<         title: 'Vice Chair',
<         name: 'Morgan Smith',
<         bio: '<p>Morgan focuses on organizing tenant unions…</p>',
<         email: env('vicechair'),
<         order: 2,
<       },
<       {
<         id: 'secretary',
<         title: 'Secretary',
<         name: 'Jamie Williams',
<         bio: '<p>Jamie maintains chapter records…</p>',
<         email: env('secretary'),
<         order: 3,
<       },
<       {
<         id: 'treasurer',
<         title: 'Treasurer',
<         name: 'Taylor Reed',
<         bio: '<p>Taylor oversees chapter finances…</p>',
<         email: env('treasurer'),
<         order: 4,
<       },
<       {
<         id: 'at-large-1',
<         title: 'At-Large Member',
<         name: 'Jordan Chen',
<         bio: '<p>Jordan leads our Medicare for All campaign…</p>',
<         email: env('atlarge1'),
<         order: 5,
<       },
<       {
<         id: 'at-large-2',
<         title: 'At-Large Member',
<         name: 'Casey Wilson',
<         bio: '<p>Casey coordinates outreach to labor unions…</p>',
<         email: env('atlarge2'),
<         order: 6,
<       },
<     ];
<   }
< 
<   team.sort((a, b) => a.order - b.order);
< 
<   return (
<     <div className="bg-gray-100 py-12">
<       <div className="container-page">
<         <h1 className="text-4xl font-bold mb-4">{c.title}</h1>
<         <div className="bg-white p-8 rounded-lg shadow-md mb-8">
<           <div
<             className="prose prose-lg max-w-none"
<             dangerouslySetInnerHTML={{ __html: html }}
<           />
<         </div>
<         <h2 className="text-3xl font-bold mb-6">Chapter Leadership</h2>
<         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
<           {team.map((l) => (
<             <LeadershipCard
<               key={l.id}
<               title={l.title}
<               name={l.name}
<               bio={l.bio}
<               email={l.email}
<               imageUrl={l.imageUrl}
<             />
<           ))}
<         </div>
<         <ChapterStructure />
<       </div>
<     </div>
<   );
---
> export default function LeadershipPage() {
>   const data = contentService.getPageContent(
>     'leadership'
>   ) as LeadershipPageContent & {
>     chapterStructure: ChapterStructureContent;
>     leadershipCard: LeadershipCardContent;
>   };
>   return <LeadershipFeature {...data} />;
Only in frontend-backup/src/app/newsletter/[slug]: components
Only in frontend-backup/src/app/newsletter/[slug]: generateStaticParams.ts
diff --color -r frontend-backup/src/app/newsletter/[slug]/page.tsx frontend/src/app/newsletter/[slug]/page.tsx
1,3d0
< import { promises as fs } from 'fs';
< import { Metadata } from 'next';
< import Link from 'next/link';
5,9d1
< import path from 'path';
< import ErrorDisplay from '../../../components/errors/ErrorDisplay';
< import { Newsletter } from '../../../types/newsletter';
< import { generateStaticParams } from './generateStaticParams';
< export { generateStaticParams };
11,15c3
< export const dynamic = 'force-dynamic';
< 
< export async function generateMetadata({
<   params,
< }: {
---
> interface PageProps {
17,45d4
< }): Promise<Metadata> {
<   const { slug } = params;
< 
<   try {
<     // Read newsletters data
<     const filePath = path.join(process.cwd(), 'src/data/newsletters.json');
<     const fileContents = await fs.readFile(filePath, 'utf8');
<     const newsletters = JSON.parse(fileContents) as Newsletter[];
< 
<     const newsletter = newsletters.find((n: Newsletter) => n.slug === slug);
< 
<     if (!newsletter) {
<       return {
<         title: 'Newsletter Not Found',
<         description: 'The requested newsletter could not be found.',
<       };
<     }
< 
<     return {
<       title: newsletter.title,
<       description: newsletter.excerpt,
<     };
<   } catch (error) {
<     console.error('Error generating metadata:', error);
<     return {
<       title: 'Delaware DSA Newsletter',
<       description: 'Latest news from Delaware DSA',
<     };
<   }
48,121c7,13
< export default async function NewsletterSlugPage({
<   params,
< }: {
<   params: { slug: string };
< }) {
<   const { slug } = params;
< 
<   try {
<     // Read newsletters data
<     const filePath = path.join(process.cwd(), 'src/data/newsletters.json');
<     const fileContents = await fs.readFile(filePath, 'utf8');
<     const newsletters = JSON.parse(fileContents) as Newsletter[];
< 
<     const newsletter = newsletters.find((n: Newsletter) => n.slug === slug);
< 
<     if (!newsletter) {
<       return notFound();
<     }
< 
<     // Read the full HTML content
<     const fullContentPath = path.join(
<       process.cwd(),
<       'public',
<       newsletter.fullContentPath
<     );
<     const fullContent = await fs.readFile(fullContentPath, 'utf-8');
< 
<     return (
<       <div className="bg-gray-100 py-12">
<         <div className="container-page">
<           <div className="mb-6">
<             <Link href="/newsletter" className="text-dsa-red hover:underline">
<               ← Back to Newsletter List
<             </Link>
<           </div>
<           <div className="bg-white p-8 rounded-lg shadow-md mb-6">
<             <h1 className="text-4xl font-bold mb-4">{newsletter.title}</h1>
<             <p className="text-gray-600 mb-6">
<               {new Date(newsletter.date).toLocaleDateString('en-US', {
<                 year: 'numeric',
<                 month: 'long',
<                 day: 'numeric',
<               })}
<             </p>
< 
<             <div className="newsletter-container">
<               <iframe
<                 srcDoc={fullContent}
<                 style={{
<                   width: '100%',
<                   height: '800px',
<                   border: 'none',
<                   overflow: 'auto',
<                 }}
<                 title={newsletter.title}
<               />
<             </div>
<           </div>
<         </div>
<       </div>
<     );
<   } catch (error) {
<     console.error('Error fetching newsletter:', error);
<     const errorMessage = error instanceof Error ? error.message : String(error);
<     return (
<       <ErrorDisplay
<         title="Error Loading Newsletter"
<         message="We're having trouble loading this newsletter. Please try again later."
<         error={errorMessage}
<         actionLabel="Return to Newsletter List"
<         actionHref="/newsletter"
<       />
<     );
<   }
---
> export default function NewsletterArticlePage({ params }: PageProps) {
>   // TODO: Implement newsletter article page
>   return (
>     <div className="container-page py-12">
>       <h1>Newsletter Article: {params.slug}</h1>
>     </div>
>   );
Only in frontend-backup/src/app/newsletter/[slug]: staticParams.ts
Only in frontend-backup/src/app/newsletter/[slug]: types.ts
diff --color -r frontend-backup/src/app/newsletter/page.tsx frontend/src/app/newsletter/page.tsx
1,6c1,7
< import { promises as fs } from 'fs';
< import { Metadata } from 'next';
< import Link from 'next/link';
< import path from 'path';
< import ErrorDisplay from '../../components/errors/ErrorDisplay';
< import { Newsletter } from '../../types/newsletter';
---
> import { contentService } from '@/core/services/contentService';
> import type {
>   NewsletterPageContent,
>   ArticleHeaderContent,
>   ArticleFooterContent
> } from '@/core/types/pages/newsletter';
> import NewsletterFeature from '@/features/newsletter';
8,73c9,14
< export const dynamic = 'force-dynamic';
< 
< export const metadata: Metadata = {
<   title: 'Newsletter',
<   description: 'Latest updates from Delaware DSA',
< };
< 
< export default async function NewsletterPage() {
<   try {
<     // Read newsletters data from JSON file
<     const filePath = path.join(process.cwd(), 'src/data/newsletters.json');
<     const fileContents = await fs.readFile(filePath, 'utf8');
<     const newsletters = JSON.parse(fileContents) as Newsletter[];
< 
<     return (
<       <div className="bg-gray-100 py-12">
<         <div className="container-page py-12">
<           <h1 className="text-4xl font-bold mb-8">Newsletter</h1>
< 
<           {newsletters.length > 0 ? (
<             <div className="space-y-8">
<               {newsletters.map((newsletter: Newsletter) => (
<                 <div
<                   key={newsletter.id}
<                   className="bg-white rounded-lg shadow-md p-6"
<                 >
<                   <h2 className="text-2xl font-bold mb-2">
<                     <Link
<                       href={`/newsletter/${newsletter.slug}`}
<                       className="text-dsa-red hover:underline"
<                     >
<                       {newsletter.title}
<                     </Link>
<                   </h2>
<                   <p className="text-gray-600 mb-2">
<                     {new Date(newsletter.date).toLocaleDateString()}
<                   </p>
<                   <div className="mb-4">{newsletter.excerpt}</div>
<                   <Link
<                     href={`/newsletter/${newsletter.slug}`}
<                     className="text-dsa-red font-medium hover:underline"
<                   >
<                     Read more →
<                   </Link>
<                 </div>
<               ))}
<             </div>
<           ) : (
<             <p>No posts found.</p>
<           )}
<         </div>
<       </div>
<     );
<   } catch (error) {
<     console.error('Error fetching newsletters:', error);
<     const errorMessage = error instanceof Error ? error.message : String(error);
<     return (
<       <ErrorDisplay
<         title="Error Loading Newsletter"
<         message="We're having trouble loading the newsletter. Please try again later."
<         error={errorMessage}
<         actionLabel="Return to Home"
<         actionHref="/"
<       />
<     );
<   }
---
> export default function NewsletterPage() {
>   const data = contentService.getPageContent('newsletter') as
>     NewsletterPageContent &
>     ArticleHeaderContent &
>     ArticleFooterContent;
>   return <NewsletterFeature {...data} />;
diff --color -r frontend-backup/src/app/page.tsx frontend/src/app/page.tsx
1,29c1,2
< // src/app/page.tsx
< import { Metadata } from 'next';
< import ChapterStatsSection from '../components/home/ChapterStatsSection';
< import GetInvolvedSection from '../components/home/GetInvolvedSection';
< import HeroSection from '../components/home/HeroSection';
< import JoinCTASection from '../components/home/JoinCTASection';
< import LatestUpdatesSection from '../components/home/LatestUpdatesSection';
< import MissionSection from '../components/home/MissionSection';
< import StrategicPrioritiesSection from '../components/home/StrategicPrioritiesSection';
< 
< export const metadata: Metadata = {
<   title: 'Home',
<   description:
<     'Delaware chapter of the Democratic Socialists of America (DSA).',
< };
< 
< export default function Home() {
<   return (
<     <>
<       <HeroSection />
<       <MissionSection />
<       <StrategicPrioritiesSection />
<       <GetInvolvedSection />
<       <ChapterStatsSection />
<       <LatestUpdatesSection />
<       <JoinCTASection />
<     </>
<   );
< }
---
> import HomePage from '@/features/home/Page';
> export default HomePage;
Only in frontend/src/app: theme
Only in frontend-backup/src/app/ud-ydsa: components
diff --color -r frontend-backup/src/app/ud-ydsa/page.tsx frontend/src/app/ud-ydsa/page.tsx
1,12c1,10
< // Use server component instead of client component
< import { Metadata } from 'next';
< import { notFound } from 'next/navigation';
< import ErrorDisplay from '../../components/errors/ErrorDisplay';
< import { fetchGraphQL } from '../../utils/graphql/fetcher';
< import CampaignsSection from './components/CampaignsSection';
< import EventsSection from './components/EventsSection';
< import HeroSection from './components/HeroSection';
< import JoinSection from './components/JoinSection';
< import LeadershipSection from './components/LeadershipSection';
< import MeetingInfoSection from './components/MeetingInfoSection';
< import { UdYdsaInfo } from './types';
---
> import { contentService } from '@/core/services/contentService';
> import type {
>   CampaignsSectionContent,
>   EventsSectionContent,
>   HeroSectionContent,
>   JoinSectionContent,
>   LeadershipSectionContent,
>   MeetingInfoSectionContent,
> } from '@/core/types/pages/ud-ydsa';
> import UdYdsaFeature from '@/features/ud-ydsa';
14,109c12,19
< export const dynamic = 'force-dynamic';
< export const metadata: Metadata = {
<   title: 'UD YDSA',
<   description: 'University of Delaware YDSA chapter page.',
< };
< 
< interface UdYdsaData {
<   page?: {
<     content?: string;
<     udYdsa?: {
<       contactEmail?: string;
<       meetingLocation?: string;
<       meetingSchedule?: string;
<       socialMedia?: {
<         instagram?: string;
<         twitter?: string;
<         facebook?: string;
<       };
<     };
<   };
< }
< 
< export default async function UdYdsa() {
<   try {
<     const query = `
<       query {
<         page(id: "ud-ydsa", idType: SLUG) {
<           content
<           udYdsa {
<             contactEmail
<             meetingLocation
<             meetingSchedule
<             socialMedia {
<               instagram
<               twitter
<               facebook
<             }
<           }
<         }
<       }
<     `;
< 
<     const response = await fetchGraphQL<UdYdsaData>(query);
<     const data = response.data || {};
< 
<     if (!data.page) return notFound();
< 
<     const html =
<       data.page.content ||
<       `
<       <p>The University of Delaware Young Democratic Socialists of America (UD YDSA) is the student chapter of DSA at UD. We organize students to build student power and fight for democratic socialist values on campus and beyond.</p>
<       <p>As a chapter of YDSA, we work to make our university more democratic and to be a force for progressive change in the broader community. We collaborate closely with Delaware DSA on campaigns and events.</p>
<     `;
< 
<     const raw = data.page.udYdsa ?? {};
<     const info: UdYdsaInfo = {
<       contactEmail: raw.contactEmail || 'udydsa@example.org',
<       meetingLocation: raw.meetingLocation || 'Morris Library, Room 202, UD',
<       meetingSchedule: raw.meetingSchedule || 'Wednesdays at 7 PM during term',
<       socialMedia: {
<         instagram: raw.socialMedia?.instagram || 'https://instagram.com',
<         twitter: raw.socialMedia?.twitter || 'https://twitter.com',
<         facebook: raw.socialMedia?.facebook || 'https://facebook.com',
<       },
<       pageContent: html,
<     };
< 
<     return (
<       <section className="bg-gray-100 py-12">
<         <div className="container-page">
<           <HeroSection udYdsaInfo={info} />
<           <div
<             className="bg-white p-8 rounded-lg shadow-md mb-8"
<             dangerouslySetInnerHTML={{ __html: html }}
<           />
<           <MeetingInfoSection udYdsaInfo={info} />
<           <CampaignsSection />
<           <LeadershipSection />
<           <EventsSection />
<           <JoinSection udYdsaInfo={info} />
<         </div>
<       </section>
<     );
<   } catch (error) {
<     console.error('Error loading UD YDSA page:', error);
<     const message = error instanceof Error ? error.message : String(error);
<     return (
<       <ErrorDisplay
<         title="Error"
<         message="Could not load UD YDSA page."
<         error={message}
<         actionLabel="Home"
<         actionHref="/"
<       />
<     );
<   }
---
> export default function UdYdsaPage() {
>   const data = contentService.getPageContent('ud-ydsa') as HeroSectionContent &
>     CampaignsSectionContent &
>     EventsSectionContent &
>     JoinSectionContent &
>     LeadershipSectionContent &
>     MeetingInfoSectionContent;
>   return <UdYdsaFeature {...data} />;
Only in frontend-backup/src/app/ud-ydsa: types.ts
Only in frontend-backup/src/app/what-we-stand-for: PositionCard.tsx
diff --color -r frontend-backup/src/app/what-we-stand-for/page.tsx frontend/src/app/what-we-stand-for/page.tsx
1,7c1,6
< // src/app/what-we-stand-for/page.tsx
< import { Metadata } from 'next';
< import ErrorDisplay from '../../components/errors/ErrorDisplay';
< import pageJson from '../../content/what-we-stand-for/page.json';
< import { fetchGraphQL } from '../../utils/graphql/fetcher';
< import PositionCard from './PositionCard';
< import { Position } from './types';
---
> import { contentService } from '@/core/services/contentService';
> import type {
>   PositionCardContent,
>   WhatWeStandForHero,
> } from '@/core/types/pages/whatWeStandFor';
> import WhatWeStandForFeature from '@/features/what-we-stand-for';
9,22c8,12
< export const dynamic = 'force-dynamic';
< export const metadata: Metadata = {
<   title: 'What We Stand For',
<   description: 'Delaware DSA positions and values.',
< };
< 
< interface WhatWeStandForContent {
<   hero: { heading: string; description: string };
<   fallbackContent: string;
<   cta: {
<     heading: string;
<     description: string;
<     buttonText: string;
<     buttonHref: string;
---
> export default function WhatWeStandForPage() {
>   const data = contentService.getPageContent(
>     'what-we-stand-for'
>   ) as WhatWeStandForHero & {
>     positionCard: PositionCardContent;
24,98c14
<   emptyPositionsMessage: string;
<   notFoundMessage: string;
< }
< 
< interface PageData {
<   page: { content: string };
<   positions: { nodes: Position[] };
< }
< 
< const j = pageJson as WhatWeStandForContent;
< const Q = `query{page(id:"what-we-stand-for",idType:URI){content}positions(first:100){nodes{id,title,content,menuOrder}}}`;
< 
< export default async function WhatWeStandFor() {
<   try {
<     const response = await fetchGraphQL<PageData>(Q);
<     const data = response.data || {
<       page: { content: '' },
<       positions: { nodes: [] },
<     };
< 
<     const html = data.page?.content || j.fallbackContent;
<     const ps = data.positions?.nodes || [];
< 
<     return (
<       <div className="bg-gray-100 py-14">
<         <div className="container-page py-14">
<           <div className="bg-dsa-red text-white p-8 rounded-lg mb-12">
<             <h1 className="text-4xl font-bold mb-4">{j.hero.heading}</h1>
<             <p className="text-xl">{j.hero.description}</p>
<           </div>
<           <div className="bg-white p-8 rounded-lg shadow-md mb-12">
<             {html ? (
<               <div
<                 className="prose prose-lg"
<                 dangerouslySetInnerHTML={{ __html: html }}
<               />
<             ) : (
<               <p className="text-center text-gray-500">{j.notFoundMessage}</p>
<             )}
<           </div>
<           {ps.length > 0 ? (
<             <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
<               {ps.map((position: Position) => (
<                 <PositionCard key={position.id} position={position} />
<               ))}
<             </div>
<           ) : (
<             <p className="text-center text-gray-500 mb-12">
<               {j.emptyPositionsMessage}
<             </p>
<           )}
<           <div className="text-center bg-white p-8 rounded-lg shadow-md">
<             <h2 className="text-3xl font-bold mb-4">{j.cta.heading}</h2>
<             <p className="text-xl mb-6">{j.cta.description}</p>
<             <a
<               href={j.cta.buttonHref}
<               className="btn btn-primary text-lg px-8 py-3"
<             >
<               {j.cta.buttonText}
<             </a>
<           </div>
<         </div>
<       </div>
<     );
<   } catch (error: unknown) {
<     console.error('Error loading positions page:', error);
<     const message =
<       error instanceof Error ? error.message : 'An unexpected error occurred.';
<     return (
<       <ErrorDisplay
<         error={message}
<         showDetails={process.env.NODE_ENV === 'development'}
<       />
<     );
<   }
---
>   return <WhatWeStandForFeature {...data} />;
Only in frontend-backup/src/app/what-we-stand-for: queries.ts
Only in frontend-backup/src/app/what-we-stand-for: types.ts
Only in frontend-backup/src: components
Only in frontend-backup/src: config
Only in frontend-backup/src: constants
Only in frontend-backup/src: content
Only in frontend-backup/src: context
Only in frontend/src: core
Only in frontend-backup/src: data
Only in frontend/src: features
Only in frontend-backup/src: hooks
Only in frontend-backup/src: lib
Only in frontend-backup/src: middleware.ts
Only in frontend-backup/src: services
Only in frontend-backup/src: types
Only in frontend-backup/src: utils
