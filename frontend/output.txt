=== File tree ===
.
├── dist
│   └── tsconfig.tsbuildinfo
├── lint-report.txt
├── middleware.ts
├── next-env.d.ts
├── next.config.ts
├── output.txt
├── package.json
├── postcss.config.js
├── public
│   ├── dedsa-logo.png
│   ├── documents
│   │   └── delaware-dsa-handbook.pdf
│   ├── home-page-photos
│   │   ├── 1.jpg
│   │   ├── 2.jpg
│   │   └── 3.jpg
│   └── newsletters
│       └── may-2025-newsletter.html
├── README.md
├── scripts
│   └── lint-report.js
├── src
│   ├── app
│   │   ├── about
│   │   │   └── page.tsx
│   │   ├── api
│   │   │   ├── contact
│   │   │   │   └── route.ts
│   │   │   ├── events
│   │   │   │   └── route.ts
│   │   │   ├── graphql
│   │   │   │   └── route.ts
│   │   │   ├── newsletters
│   │   │   │   ├── [slug]
│   │   │   │   │   └── route.ts
│   │   │   │   └── route.ts
│   │   │   └── revalidate
│   │   │       └── route.ts
│   │   ├── bylaws
│   │   │   └── page.tsx
│   │   ├── calendar
│   │   │   ├── events
│   │   │   │   ├── [slug]
│   │   │   │   │   ├── client.tsx
│   │   │   │   │   └── page.tsx
│   │   │   │   └── client.tsx
│   │   │   └── page.tsx
│   │   ├── contact
│   │   │   └── page.tsx
│   │   ├── error.tsx
│   │   ├── globals.css
│   │   ├── join
│   │   │   └── page.tsx
│   │   ├── layout.tsx
│   │   ├── leadership
│   │   │   └── page.tsx
│   │   ├── loading.tsx
│   │   ├── newsletter
│   │   │   ├── [slug]
│   │   │   │   ├── client.tsx
│   │   │   │   └── page.tsx
│   │   │   └── page.tsx
│   │   ├── not-found.tsx
│   │   ├── page.tsx
│   │   ├── providers.tsx
│   │   ├── theme
│   │   │   └── ThemeProvider.tsx
│   │   ├── ud-ydsa
│   │   │   └── page.tsx
│   │   └── what-we-stand-for
│   │       └── page.tsx
│   ├── content
│   │   ├── bylaws
│   │   │   ├── bylawsDocument.json
│   │   │   ├── frequentlyAskedQuestions.json
│   │   │   ├── keyGovernanceSections.json
│   │   │   ├── otherDocuments.json
│   │   │   └── page.json
│   │   ├── components
│   │   │   ├── footer.json
│   │   │   └── header.json
│   │   ├── contact
│   │   │   ├── contactForm.json
│   │   │   └── page.json
│   │   ├── leadership
│   │   │   ├── chapterStructure.json
│   │   │   ├── leadershipCard.json
│   │   │   └── page.json
│   │   ├── ud-ydsa
│   │   │   ├── campaignsSection.json
│   │   │   ├── eventsSection.json
│   │   │   ├── heroSection.json
│   │   │   ├── joinSection.json
│   │   │   ├── leadershipSection.json
│   │   │   └── meetingInfoSection.json
│   │   └── what-we-stand-for
│   │       ├── page.json
│   │       └── positionCard.json
│   ├── core
│   │   ├── components
│   │   │   ├── layout
│   │   │   │   ├── Footer.tsx
│   │   │   │   └── Header.tsx
│   │   │   ├── motion
│   │   │   │   └── MotionDiv.tsx
│   │   │   ├── shared
│   │   │   │   ├── GenericCard.tsx
│   │   │   │   └── GenericSection.tsx
│   │   │   ├── types
│   │   │   │   └── index.ts
│   │   │   └── ui
│   │   │       ├── Blob.tsx
│   │   │       ├── Button.tsx
│   │   │       ├── Confetti.tsx
│   │   │       ├── Icons.tsx
│   │   │       └── UiString.tsx
│   │   ├── content
│   │   │   ├── components
│   │   │   │   ├── footer.json
│   │   │   │   ├── header.json
│   │   │   │   └── newsletterSignup.json
│   │   │   ├── layout
│   │   │   │   ├── footer.json
│   │   │   │   └── header.json
│   │   │   ├── pages
│   │   │   │   ├── about.json
│   │   │   │   ├── bylaws
│   │   │   │   │   ├── bylawsDocument.json
│   │   │   │   │   ├── frequentlyAskedQuestions.json
│   │   │   │   │   ├── keyGovernanceSections.json
│   │   │   │   │   └── otherDocuments.json
│   │   │   │   ├── bylaws.json
│   │   │   │   ├── calendar.json
│   │   │   │   ├── contact.json
│   │   │   │   ├── home.json
│   │   │   │   ├── join.json
│   │   │   │   ├── leadership.json
│   │   │   │   ├── newsletter.json
│   │   │   │   ├── ud-ydsa.json
│   │   │   │   └── what-we-stand-for.json
│   │   │   └── shared
│   │   ├── context
│   │   │   └── AppContext.tsx
│   │   ├── hooks
│   │   │   ├── calendar
│   │   │   │   ├── useCalendar.ts
│   │   │   │   └── useGoogleCalendar.ts
│   │   │   ├── content
│   │   │   │   └── useUiString.ts
│   │   │   ├── index.ts
│   │   │   ├── useForm.ts
│   │   │   ├── useInfiniteScroll.ts
│   │   │   ├── useKeyboardShortcut.ts
│   │   │   ├── useLocalStorage.ts
│   │   │   ├── useNewsletterSubscription.ts
│   │   │   └── useWindowSize.ts
│   │   ├── services
│   │   │   ├── contentService.ts
│   │   │   └── newsletterService.ts
│   │   ├── types
│   │   │   ├── api
│   │   │   │   └── index.ts
│   │   │   ├── component-content.d.ts
│   │   │   ├── components
│   │   │   │   └── index.ts
│   │   │   ├── hooks
│   │   │   │   └── index.ts
│   │   │   ├── index.ts
│   │   │   ├── layout
│   │   │   │   └── index.ts
│   │   │   ├── layout.ts
│   │   │   ├── pages
│   │   │   │   ├── about.ts
│   │   │   │   ├── bylaws.ts
│   │   │   │   ├── calendar.ts
│   │   │   │   ├── components.ts
│   │   │   │   ├── contact.ts
│   │   │   │   ├── home.ts
│   │   │   │   ├── index.ts
│   │   │   │   ├── join.ts
│   │   │   │   ├── leadership.ts
│   │   │   │   ├── newsletter.ts
│   │   │   │   ├── ud-ydsa.ts
│   │   │   │   └── whatWeStandFor.ts
│   │   │   └── shared
│   │   │       └── index.ts
│   │   └── utils
│   │       ├── animations.ts
│   │       ├── graphql
│   │       │   ├── apollo.ts
│   │       │   ├── fetcher.ts
│   │       │   └── graphql.ts
│   │       └── styles
│   │           └── tailwindClasses.ts
│   ├── data
│   │   └── newsletters.json
│   ├── features
│   │   ├── about
│   │   │   ├── components
│   │   │   │   ├── AboutHero.tsx
│   │   │   │   ├── Achievements.tsx
│   │   │   │   ├── DemocraticSocialism.tsx
│   │   │   │   ├── GetInvolved.tsx
│   │   │   │   ├── NationalInfo.tsx
│   │   │   │   └── Timeline.tsx
│   │   │   ├── index.ts
│   │   │   ├── Page.tsx
│   │   │   └── types
│   │   │       └── index.ts
│   │   ├── bylaws
│   │   │   ├── components
│   │   │   │   ├── BylawsDocument.tsx
│   │   │   │   ├── FrequentlyAskedQuestions.tsx
│   │   │   │   ├── KeyGovernanceSections.tsx
│   │   │   │   ├── OtherDocuments.tsx
│   │   │   │   └── queries.ts
│   │   │   ├── index.ts
│   │   │   ├── Page.tsx
│   │   │   └── types.old
│   │   │       └── index.ts
│   │   ├── calendar
│   │   │   ├── components
│   │   │   │   ├── CalendarFilters.tsx
│   │   │   │   ├── CalendarHeader.tsx
│   │   │   │   ├── CalendarSubscription.tsx
│   │   │   │   ├── EventCard.tsx
│   │   │   │   ├── ListView.tsx
│   │   │   │   └── MonthView.tsx
│   │   │   ├── index.ts
│   │   │   └── Page.tsx
│   │   ├── contact
│   │   │   ├── components
│   │   │   │   ├── ContactForm.tsx
│   │   │   │   └── ContactInfo.tsx
│   │   │   ├── index.ts
│   │   │   └── Page.tsx
│   │   ├── home
│   │   │   ├── components
│   │   │   │   ├── ChapterStatsSection.tsx
│   │   │   │   ├── GetInvolvedSection
│   │   │   │   │   ├── CommitteeItem.tsx
│   │   │   │   │   ├── CommitteesCard.tsx
│   │   │   │   │   ├── EventItem.tsx
│   │   │   │   │   ├── index.tsx
│   │   │   │   │   ├── types.ts
│   │   │   │   │   └── UpcomingEventsCard.tsx
│   │   │   │   ├── HeroSection.tsx
│   │   │   │   ├── JoinCTASection.tsx
│   │   │   │   ├── LatestUpdatesSection.tsx
│   │   │   │   ├── MissionSection.tsx
│   │   │   │   └── StrategicPrioritiesSection.tsx
│   │   │   ├── index.ts
│   │   │   └── Page.tsx
│   │   ├── index.ts
│   │   ├── join
│   │   │   ├── components
│   │   │   │   ├── FAQ.tsx
│   │   │   │   ├── JoinHero.tsx
│   │   │   │   ├── MembershipOptions.tsx
│   │   │   │   ├── Testimonials.tsx
│   │   │   │   └── WhyJoinDSA.tsx
│   │   │   ├── content
│   │   │   │   └── join.json
│   │   │   ├── index.ts
│   │   │   ├── Page.tsx
│   │   │   └── types
│   │   │       └── index.ts
│   │   ├── leadership
│   │   │   ├── index.ts
│   │   │   └── Page.tsx
│   │   ├── newsletter
│   │   │   ├── components
│   │   │   ├── index.ts
│   │   │   └── Page.tsx
│   │   ├── ud-ydsa
│   │   │   ├── index.ts
│   │   │   └── Page.tsx
│   │   └── what-we-stand-for
│   │       ├── index.ts
│   │       └── Page.tsx
│   ├── googleService.json
│   └── mocks
│       └── api
│           └── mockApiHandlers.ts
├── tailwind.config.js
└── tsconfig.json

90 directories, 198 files

=== Source & content for ‘what-we-stand-for’ ===

─── src/app/what-we-stand-for/page.tsx ───
import { contentService } from '@/core/services/contentService';
import type {
  PositionCardContent,
  WhatWeStandForPageContent,
} from '@/core/types/pages/whatWeStandFor';
import WhatWeStandForFeature from '@/features/what-we-stand-for';

export default function WhatWeStandForPage() {
  const data = contentService.getPageContent(
    'whatWeStandFor'
  ) as WhatWeStandForPageContent & {
    positionCard: PositionCardContent;
  };
  return <WhatWeStandForFeature {...data} />;
}

─── src/features/what-we-stand-for/index.ts ───
export { default } from './Page';

─── src/features/what-we-stand-for/Page.tsx ───
'use client';

import type {
  PositionCardContent,
  WhatWeStandForPageContent,
} from '@/core/types/pages/whatWeStandFor';
import { motion } from 'framer-motion';
import Link from 'next/link';
import { useInView } from 'react-intersection-observer';

type Props = WhatWeStandForPageContent & { positionCard: PositionCardContent };

export default function WhatWeStandForPage(props: Props) {
  const { hero, aboutSection, beliefs, platform, priorities2025, cta } = props;

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Hero Section */}
      <HeroSection hero={hero} />

      {/* About Section */}
      <AboutSection aboutSection={aboutSection} />

      {/* Beliefs Section */}
      <BeliefsSection beliefs={beliefs} />

      {/* Platform Section */}
      <PlatformSection platform={platform} />

      {/* 2025 Priorities Section */}
      <PrioritiesSection priorities2025={priorities2025} />

      {/* Call to Action */}
      <CTASection cta={cta} />
    </div>
  );
}

// Hero Section Component
function HeroSection({ hero }: { hero: WhatWeStandForPageContent['hero'] }) {
  const { ref, inView } = useInView({ threshold: 0.1, triggerOnce: true });

  return (
    <motion.section
      ref={ref}
      className="bg-gradient-animated text-white py-20 relative overflow-hidden"
      initial={{ opacity: 0 }}
      animate={inView ? { opacity: 1 } : { opacity: 0 }}
      transition={{ duration: 0.8 }}
    >
      <div className="absolute inset-0 bg-black bg-opacity-30"></div>
      <div className="container-page relative z-10">
        <motion.h1
          className="text-4xl md:text-6xl font-bold mb-6"
          initial={{ y: 30, opacity: 0 }}
          animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          {hero.heading}
        </motion.h1>
        <motion.p
          className="text-xl md:text-2xl max-w-4xl leading-relaxed"
          initial={{ y: 30, opacity: 0 }}
          animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
        >
          {hero.description}
        </motion.p>
      </div>
    </motion.section>
  );
}

// About Section Component
function AboutSection({
  aboutSection,
}: {
  aboutSection: WhatWeStandForPageContent['aboutSection'];
}) {
  const { ref, inView } = useInView({ threshold: 0.1, triggerOnce: true });

  return (
    <motion.section
      ref={ref}
      className="py-16 bg-white"
      initial={{ opacity: 0 }}
      animate={inView ? { opacity: 1 } : { opacity: 0 }}
      transition={{ duration: 0.8 }}
    >
      <div className="container-page">
        <motion.h2
          className="text-3xl md:text-4xl font-bold mb-6 text-center"
          initial={{ y: 30, opacity: 0 }}
          animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          {aboutSection.title}
        </motion.h2>
        <motion.p
          className="text-lg text-center max-w-4xl mx-auto leading-relaxed"
          initial={{ y: 30, opacity: 0 }}
          animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
        >
          {aboutSection.content}
        </motion.p>
      </div>
    </motion.section>
  );
}

// Beliefs Section Component
function BeliefsSection({
  beliefs,
}: {
  beliefs: WhatWeStandForPageContent['beliefs'];
}) {
  const { ref, inView } = useInView({ threshold: 0.1, triggerOnce: true });

  return (
    <motion.section
      ref={ref}
      className="py-16 bg-gray-50"
      initial={{ opacity: 0 }}
      animate={inView ? { opacity: 1 } : { opacity: 0 }}
      transition={{ duration: 0.8 }}
    >
      <div className="container-page">
        <motion.div
          className="text-center mb-12"
          initial={{ y: 30, opacity: 0 }}
          animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            {beliefs.title}
          </h2>
          <p className="text-lg text-gray-600 max-w-3xl mx-auto">
            {beliefs.subtitle}
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {beliefs.principles.map((principle, index) => (
            <motion.div
              key={principle.title}
              className="bg-white p-8 rounded-lg shadow-md hover:shadow-lg transition-shadow"
              initial={{ y: 30, opacity: 0 }}
              animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
              transition={{ duration: 0.8, delay: 0.2 + index * 0.1 }}
            >
              <div className="flex items-start mb-4">
                <div className="p-3 bg-dsa-red rounded-full mr-4">
                  <svg
                    className="w-6 h-6 text-white"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d={principle.icon}
                    />
                  </svg>
                </div>
                <h3 className="text-xl font-bold">{principle.title}</h3>
              </div>
              <p className="text-gray-700 leading-relaxed">
                {principle.description}
              </p>
            </motion.div>
          ))}
        </div>
      </div>
    </motion.section>
  );
}

// Platform Section Component
function PlatformSection({
  platform,
}: {
  platform: WhatWeStandForPageContent['platform'];
}) {
  const { ref, inView } = useInView({ threshold: 0.1, triggerOnce: true });

  return (
    <motion.section
      ref={ref}
      className="py-16 bg-white"
      initial={{ opacity: 0 }}
      animate={inView ? { opacity: 1 } : { opacity: 0 }}
      transition={{ duration: 0.8 }}
    >
      <div className="container-page">
        <motion.div
          className="text-center mb-12"
          initial={{ y: 30, opacity: 0 }}
          animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            {platform.title}
          </h2>
          <p className="text-lg text-gray-600 max-w-3xl mx-auto">
            {platform.subtitle}
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {platform.planks.map((plank, index) => (
            <motion.div
              key={plank.title}
              className="bg-white border-l-4 p-8 rounded-lg shadow-md hover:shadow-lg transition-all duration-300"
              style={{ borderLeftColor: plank.color }}
              initial={{ y: 30, opacity: 0 }}
              animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
              transition={{ duration: 0.8, delay: 0.2 + index * 0.1 }}
              whileHover={{ y: -5 }}
            >
              <div className="flex items-start mb-4">
                <div
                  className="p-3 rounded-full mr-4"
                  style={{ backgroundColor: `${plank.color}20` }}
                >
                  <svg
                    className="w-6 h-6"
                    style={{ color: plank.color }}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d={plank.icon}
                    />
                  </svg>
                </div>
                <h3
                  className="text-xl font-bold"
                  style={{ color: plank.color }}
                >
                  {plank.title}
                </h3>
              </div>
              <p className="text-gray-700 leading-relaxed">
                {plank.description}
              </p>
            </motion.div>
          ))}
        </div>
      </div>
    </motion.section>
  );
}

// Priorities Section Component - Updated for 2025
function PrioritiesSection({
  priorities2025,
}: {
  priorities2025: WhatWeStandForPageContent['priorities2025'];
}) {
  const { ref, inView } = useInView({ threshold: 0.1, triggerOnce: true });

  return (
    <motion.section
      ref={ref}
      className="py-20 bg-gray-100 relative overflow-hidden"
      initial={{ opacity: 0 }}
      animate={inView ? { opacity: 1 } : { opacity: 0 }}
      transition={{ duration: 0.8 }}
    >
      {/* Background Pattern */}
      <div className="absolute inset-0 opacity-5">
        <svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <pattern
              id="dot"
              width="20"
              height="20"
              patternUnits="userSpaceOnUse"
            >
              <circle cx="2" cy="2" r="1" fill="currentColor" />
            </pattern>
          </defs>
          <rect width="100%" height="100%" fill="url(#dot)" />
        </svg>
      </div>

      <div className="container-page relative z-10">
        <motion.div
          className="text-center mb-12"
          initial={{ y: 30, opacity: 0 }}
          animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          <h2 className="text-3xl md:text-5xl font-bold mb-2 text-heading">
            {priorities2025.title}
          </h2>
          <div className="w-24 h-1 bg-dsa-red mx-auto mb-4 rounded"></div>
          <p className="text-lg text-secondary max-w-3xl mx-auto">
            {priorities2025.subtitle}
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {priorities2025.priorities.map((priority, index) => (
            <motion.div
              key={priority.title}
              className="group bg-white p-8 rounded-xl shadow-md hover:shadow-lg transition-all duration-500 border-l-4 border-dsa-red relative overflow-hidden"
              initial={{ y: 30, opacity: 0 }}
              animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
              transition={{ duration: 0.8, delay: 0.2 + index * 0.1 }}
              whileHover={{ y: -5 }}
            >
              <motion.div
                className="absolute -right-20 -bottom-20 w-40 h-40 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-500 ease-in-out"
                style={{
                  background:
                    'radial-gradient(circle,rgba(236,31,39,0.1) 0%,rgba(255,255,255,0) 70%)',
                }}
              />

              <div className="flex items-start mb-4 relative z-10">
                <motion.div
                  className="p-3 bg-red-50 rounded-full mr-4 group-hover:bg-red-100 transition-colors duration-300"
                  whileHover={{ rotate: [0, -10, 10, -10, 0] }}
                  transition={{ duration: 0.5 }}
                >
                  <svg
                    className="w-6 h-6 text-dsa-red group-hover:scale-110 transition-transform duration-300"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d={priority.iconPath}
                    />
                  </svg>
                </motion.div>
                <h3 className="text-xl font-bold text-card-title group-hover:text-dsa-red transition-colors duration-300">
                  {priority.title}
                </h3>
              </div>

              <p className="pl-12 relative z-10 text-card-body transition-all duration-300">
                {priority.description}
              </p>
            </motion.div>
          ))}
        </div>

        <motion.div
          className="text-center mt-12"
          initial={{ opacity: 0, y: 20 }}
          animate={inView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
          transition={{ duration: 0.8, delay: 0.4 }}
        >
          <a
            href={priorities2025.linkHref}
            className="inline-flex items-center text-link hover:underline font-medium group"
          >
            <span>{priorities2025.linkText}</span>
            <motion.svg
              className="ml-2 w-5 h-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              animate={{ x: [0, 5, 0] }}
              transition={{
                repeat: Infinity,
                repeatType: 'loop',
                duration: 1.5,
                repeatDelay: 1,
              }}
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M14 5l7 7m0 0l-7 7m7-7H3"
              />
            </motion.svg>
          </a>
        </motion.div>
      </div>
    </motion.section>
  );
}

// CTA Section Component
function CTASection({ cta }: { cta: WhatWeStandForPageContent['cta'] }) {
  const { ref, inView } = useInView({ threshold: 0.1, triggerOnce: true });

  return (
    <motion.section
      ref={ref}
      className="py-16 bg-dsa-red text-white"
      initial={{ opacity: 0 }}
      animate={inView ? { opacity: 1 } : { opacity: 0 }}
      transition={{ duration: 0.8 }}
    >
      <div className="container-page text-center">
        <motion.h2
          className="text-3xl md:text-4xl font-bold mb-4"
          initial={{ y: 30, opacity: 0 }}
          animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          {cta.heading}
        </motion.h2>
        <motion.p
          className="text-lg mb-8 max-w-2xl mx-auto"
          initial={{ y: 30, opacity: 0 }}
          animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
        >
          {cta.description}
        </motion.p>
        <motion.div
          initial={{ y: 30, opacity: 0 }}
          animate={inView ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
          transition={{ duration: 0.8, delay: 0.6 }}
        >
          <Link
            href={cta.buttonHref}
            className="btn bg-white text-dsa-red hover:bg-gray-100 text-lg px-8 py-3"
          >
            {cta.buttonText}
          </Link>
        </motion.div>
      </div>
    </motion.section>
  );
}

─── src/content/what-we-stand-for/positionCard.json ───
{
  "ariaLabels": {
    "position": "Position statement on"
  }
}

─── src/content/what-we-stand-for/page.json ───
{
  "hero": {
    "heading": "What We Stand For",
    "description": "The Delaware DSA is committed to building a more just and equitable society. We believe in democratic socialism—a system where ordinary people have a real voice in our workplaces, communities, and government."
  },
  "fallbackContent": "<p>Delaware DSA is the Delaware state chapter of the Democratic Socialists of America (DSA), the largest socialist organization in the United States.</p><p>Our chapter brings together democratic socialists of all backgrounds to organize and fight for a political and economic system that puts people before profits. We believe that both the economy and society should be run democratically to meet human needs.</p>",
  "cta": {
    "heading": "Join Our Movement",
    "description": "If you share our vision for a more just, democratic, and sustainable future, we invite you to join Delaware DSA today.",
    "buttonText": "Become A Member",
    "buttonHref": "/join"
  },
  "emptyPositionsMessage": "No positions to display at this time.",
  "notFoundMessage": "Content is not available."
}

─── src/core/services/contentService.ts ───
// src/core/services/contentService.ts
import footer from '../content/components/footer.json';
import header from '../content/components/header.json';
import newsletterSignup from '../content/components/newsletterSignup.json';
import about from '../content/pages/about.json';
import bylaws from '../content/pages/bylaws.json';
import calendar from '../content/pages/calendar.json';
import contact from '../content/pages/contact.json';
import home from '../content/pages/home.json';
import join from '../content/pages/join.json';
import leadership from '../content/pages/leadership.json';
import newsletter from '../content/pages/newsletter.json';
import udYdsa from '../content/pages/ud-ydsa.json';
import whatWeStandFor from '../content/pages/what-we-stand-for.json';

// Import all content directly
const pageContent = {
  about,
  home,
  join,
  calendar,
  contact,
  leadership,
  newsletter,
  bylaws,
  whatWeStandFor,
  udYdsa,
};

const componentContent = {
  header,
  footer,
  newsletterSignup,
};

export const contentService = {
  /**
   * Get content for a specific page
   */
  getPageContent: (pageName: keyof typeof pageContent) => {
    return pageContent[pageName];
  },

  /**
   * Get content for a specific component
   */
  getComponentContent: (componentName: keyof typeof componentContent) => {
    return componentContent[componentName];
  },
};

─── src/core/types/pages/whatWeStandFor.ts ───
// frontend/src/core/types/pages/whatWeStandFor.ts

export interface WhatWeStandForHero {
  heading: string;
  description: string;
}

export interface AboutSectionContent {
  title: string;
  content: string;
}

export interface Principle {
  title: string;
  description: string;
  icon: string;
}

export interface BeliefsContent {
  title: string;
  subtitle: string;
  principles: Principle[];
}

export interface PlatformPlank {
  title: string;
  description: string;
  icon: string;
  color: string;
}

export interface PlatformContent {
  title: string;
  subtitle: string;
  planks: PlatformPlank[];
}

export interface Priority2025 {
  title: string;
  description: string;
  iconPath: string;
}

export interface Priorities2025Content {
  title: string;
  subtitle: string;
  linkText: string;
  linkHref: string;
  priorities: Priority2025[];
}

export interface WhatWeStandForCTA {
  heading: string;
  description: string;
  buttonText: string;
  buttonHref: string;
}

export interface WhatWeStandForPageContent {
  hero: WhatWeStandForHero;
  aboutSection: AboutSectionContent;
  beliefs: BeliefsContent;
  platform: PlatformContent;
  priorities2025: Priorities2025Content;
  cta: WhatWeStandForCTA;
  emptyPositionsMessage: string;
  notFoundMessage: string;
}

export interface PositionCardContent {
  ariaLabels: {
    position: string;
  };
}
