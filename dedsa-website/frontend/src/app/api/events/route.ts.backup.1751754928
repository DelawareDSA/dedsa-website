import { promises as fs } from 'fs';
import { google } from 'googleapis';
import { NextResponse } from 'next/server';
import path from 'path';

interface ServiceAccount {
  client_email: string;
  private_key: string;
  type: string;
  project_id: string;
  private_key_id: string;
  client_id: string;
  auth_uri: string;
  token_uri: string;
  auth_provider_x509_cert_url: string;
  client_x509_cert_url: string;
  universe_domain: string;
}

export async function GET() {
  console.log('üõ†Ô∏è  /api/events invoked');
  console.log('  cwd=', process.cwd());
  console.log('  GOOGLE_CALENDAR_ID=', process.env.GOOGLE_CALENDAR_ID);

  const calendarId = process.env.GOOGLE_CALENDAR_ID;
  if (!calendarId) {
    console.error('‚ùå GOOGLE_CALENDAR_ID is not set');
    return NextResponse.json({ error: 'Missing calendar ID' }, { status: 500 });
  }
  console.log('‚úÖ Calendar ID found:', calendarId);

  let serviceAccount: ServiceAccount;
  const credsPath = path.join(process.cwd(), 'src', 'googleService.json');
  try {
    console.log('üîê Reading service account from', credsPath);
    const content = await fs.readFile(credsPath, 'utf8');
    serviceAccount = JSON.parse(content) as ServiceAccount;
    console.log('‚úÖ Service account parsed successfully');
  } catch (err) {
    console.error('‚ùå Could not load googleService.json:', err);
    return NextResponse.json({ error: 'Credentials missing' }, { status: 500 });
  }

  try {
    console.log('üîë Authenticating with Google JWT');
//     const auth = new google.auth.JWT({
//       email: serviceAccount.client_email,
//       key: serviceAccount.private_key,
//     });
// 
//     const calendar = google.calendar({ version: 'v3', auth });
//     console.log('üìÖ Fetching events from Calendar API');
//     const { data } = await calendar.events.list({
//       calendarId,
//       timeMin: new Date().toISOString(),
//       singleEvents: true,
//       orderBy: 'startTime',
//       maxResults: 50,
//     });
// 
//     const events = data.items || [];
//     console.log(`üéâ Retrieved ${events.length} events`);
    // ‚Üí Fetch from WP instead of Google

    const wpRes = await fetch(process.env.WORDPRESS_API_URL.replace(//graphql$/, "") + `/wp-json/calendar/v1/events?month=${new Date().getMonth()+1}&year=${new Date().getFullYear()}`);

    if (!wpRes.ok) return NextResponse.json({ error: "WP events failed" }, { status: 500 });

    const wpEvents = await wpRes.json();

    return NextResponse.json(wpEvents);

    // ‚Üí Fetch from WP instead of Google

    const wpRes = await fetch(process.env.WORDPRESS_API_URL.replace(//graphql$/, "") + `/wp-json/calendar/v1/events?month=${new Date().getMonth()+1}&year=${new Date().getFullYear()}`);

    if (!wpRes.ok) return NextResponse.json({ error: "WP events failed" }, { status: 500 });

    const wpEvents = await wpRes.json();

    return NextResponse.json(wpEvents);

  } catch (err) {
    console.error('‚ùå Calendar API error:', err);
    return NextResponse.json(
      { error: 'Failed to fetch events' },
      { status: 500 }
    );
  }
}
